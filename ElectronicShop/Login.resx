<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAJgAAAFkAAACIAAAAqwAA
        AL8AAADJAAAAyQAAAL8AAACrAAAAiAAAAFkAAAAmAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAMAAAAHgAAACwAAAA1AAA
        AOgAAADzAAAA+QAAAPsAAAD7AAAA+QAAAPMAAADoAAAA1AAAALAAAAB4AAAAMAAAAAQAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAG4AAAC6AAAA5gAA
        APsAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA+wAAAOYAAAC6AAAAbgAA
        ABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC8AAACXAAAA2wAA
        APsAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        APsAAADbAAAAmAAAAC8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5AAAAqgAA
        AOoAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAADqAAAAqgAAADkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAA
        AKoAAADuAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADuAAAAqgAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        ABkAAACYAAAA6gAAAP8CAgL/FhYW/xgYGP8ZGRn/FRUV/xAQEP8MDAz/EBAQ/xYWFv8SEhL/FRUV/xUV
        Ff8WFhb/Dg4O/xYWFv8RERH/FBQU/xUVFf8GBgb/AAAA/wAAAP8AAADqAAAAmAAAABkAAAAAAAAAAAAA
        AAAAAAADAAAAbgAAANsAAAD/AAAA/wcHB/9ERET/Nzc3/0RERP8/Pz//MzMz/0FBQf9QUFD/QEBA/1BQ
        UP9QUFD/Pj4+/0VFRf8sLCz/RkZG/0dHR/9GRkb/SkpK/zk5Of8CAgL/AAAA/wAAAP8AAADaAAAAbgAA
        AAMAAAAAAAAAAAAAADEAAAC6AAAA+gAAAP8AAAD/AQEB/w8PD/8KCgr/DQ0N/w8PD/8RERH/FBQU/xER
        Ef8PDw//Dg4O/wsLC/8PDw//EBAQ/wkJCf8PDw//CQkJ/xISEv8VFRX/Dw8P/wEBAf8AAAD/AAAA/wAA
        APoAAAC6AAAAMQAAAAAAAAAEAAAAeAAAAOUAAAD/AAAA/wAAAP8AAAD/AAAA/wICAv8BAQH/AQEB/wAA
        AP8CAgL/AAAA/wEBAf8CAgL/AAAA/wAAAP8AAAD/AAAA/wICAv8AAAD/Nzc3/ysrK/8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAOUAAAB4AAAABAAAACYAAACwAAAA+gAAAP8AAAD/AAAA/wAAAP88PDz/NTU1/y0t
        Lf8+Pj7/KSkp/y4uLv8aGhr/LCws/zMzM/8uLi7/NTU1/zMzM/8rKyv/NTU1/zAwMP9HR0f/Tk5O/y0t
        Lf8BAQH/AAAA/wAAAP8AAAD/AAAA+gAAALAAAAAmAAAAWQAAANMAAAD/AAAA/wAAAP8AAAD/AAAA/1ZW
        Vv81NTX/Gxsb/1VVVf9fX1//Pz8//ysrK/8YGBj/XFxc/1hYWP9QUFD/R0dH/1tbW/81NTX/Tk5O/1tb
        W/84ODj/Wlpa/wgICP8AAAD/AAAA/wAAAP8AAAD/AAAA0wAAAFkAAACIAAAA6AAAAP8AAAD/AAAA/wAA
        AP8AAAD/V1dX/0BAQP8aGhr/U1NT/zg4OP9DQ0P/Ozs7/2RkZP9KSkr/JCQk/2dnZ/9MTEz/Ly8v/zw8
        PP8+Pj7/RERE/05OTv9DQ0P/AgIC/wAAAP8AAAD/AAAA/wAAAP8AAADoAAAAiAAAAKoAAADzAAAA/wAA
        AP8AAAD/AAAA/wAAAP9OTk7/OTk5/yoqKv9SUlL/Dw8P/wgICP8MDAz/RUVF/ygoKP8vLy//TExM/wgI
        CP8BAQH/CAgI/wYGBv8FBQX/CgoK/wUFBf8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPMAAACqAAAAvwAA
        APgAAAD/AAAA/wAAAP8AAAD/AAAA/wsLC/8QEBD/DAwM/w8PD/8CAgL/AAAA/wAAAP8JCQn/Dg4O/wkJ
        Cf8MDAz/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA+AAA
        AL8AAADJAAAA+gAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/DQ0N/xER
        Ef8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD6AAAAyQAAAMkAAAD6AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8iIiL/Nzc3/xMTE/8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAPoAAADJAAAAvwAAAPgAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AwMD/zQ0NP85OTn/Q0ND/xYWFv8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA+AAAAL8AAACqAAAA8wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8LCwv/QkJC/zo6Ov9ra2v/u7u7/zw8PP8ICAj/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADzAAAAqgAAAIgAAADoAAAA/wAAAP8AAAD/AAAA/wAA
        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
        AAPgAAAH8AAAD/gAAB/8AAA//gAAf/+AAf8=
</value>
  </data>
</root>